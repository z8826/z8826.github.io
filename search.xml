<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[springboot集成swagger2构建RESTful API文档]]></title>
      <url>http://zhangqixiang.com/2017/01/17/Springboot-Swagger2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在开发过程中,有时候我们需要不停的测试接口,自测,或者交由测试测试接口,我们需要构建一个文档,都是单独写,太麻烦了,现在使用springboot集成swagger2来构建RESTful API文档,可以在访问接口上,直接添加注释</p>
</blockquote>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol>
<li>jdk版本是1.8</li>
<li>springboot的版本是1.4.3</li>
<li>开发工具为 intellij idea</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;2.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;2.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="启用swagger2"><a href="#启用swagger2" class="headerlink" title="启用swagger2"></a>启用swagger2</h2><p>接下来,我们构建swagger2的配置类,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//注解开启 swagger2 功能</div><div class="line">@EnableSwagger2</div><div class="line">//注解标示,这是一个配置类,@Configuation注解包含了@Component注解</div><div class="line">//可以不用在使用@Component注解标记这是个bean了,</div><div class="line">@Configuration</div><div class="line">public class Swagger2 &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 通过 createRestApi函数来构建一个DocketBean</div><div class="line">	 * 函数名,可以随意命名,喜欢什么命名就什么命名</div><div class="line">	 */</div><div class="line">	@Bean</div><div class="line">	public Docket createRestApi() &#123;</div><div class="line">		return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">				.apiInfo(apiInfo())//调用apiInfo方法,创建一个ApiInfo实例,里面是展示在文档页面信息内容</div><div class="line">				.select()</div><div class="line">				//控制暴露出去的路径下的实例</div><div class="line">				//如果某个接口不想暴露,可以使用以下注解</div><div class="line">				//@ApiIgnore 这样,该接口就不会暴露在 swagger2 的页面下</div><div class="line">				.apis(RequestHandlerSelectors.basePackage(&quot;com.example&quot;))</div><div class="line">				.paths(PathSelectors.any())</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line">    //构建 api文档的详细信息函数</div><div class="line">	private ApiInfo apiInfo() &#123;</div><div class="line">		return new ApiInfoBuilder()</div><div class="line">				//页面标题</div><div class="line">				.title(&quot;Spring Boot 测试使用 Swagger2 构建RESTful API&quot;)</div><div class="line">				//创建人</div><div class="line">				.contact(&quot;xiang.orchid@gmail.com&quot;)</div><div class="line">				//版本号</div><div class="line">				.version(&quot;1.0&quot;)</div><div class="line">				//描述</div><div class="line">				.description(&quot;API 描述&quot;)</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>swagger2的配置类已经配置好了,下面,我们就在主函数里面随意写一些接口吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication(scanBasePackages = &#123;&quot;com&quot;&#125;)</div><div class="line">//该注解包含了@Controller和@ResponseBody两个注解</div><div class="line">@RestController</div><div class="line">public class DemoApplication&#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">    * 以下函数的注释,不增加注解了,将在下面统一做描述</div><div class="line">    */</div><div class="line"></div><div class="line"></div><div class="line">	@ApiOperation(value = &quot;测试post请求&quot;,notes=&quot;注意事项&quot;)</div><div class="line">	@ApiImplicitParam(dataType = &quot;User&quot;,name = &quot;user&quot;,value = &quot;用户信息&quot;,required = true)</div><div class="line">	@RequestMapping(value = &quot;/testPost&quot;,method = RequestMethod.POST)</div><div class="line">	public String testPost(@RequestBody User user)&#123;</div><div class="line">		return &quot;success&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	@ApiOperation(value = &quot;测试get请求&quot;,notes=&quot;注意事项&quot;)</div><div class="line">	@ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户id&quot;,dataType = &quot;String&quot;,paramType = &quot;path&quot;)</div><div class="line">	@RequestMapping(value = &quot;/testGet/&#123;id&#125;&quot;,method = RequestMethod.GET)</div><div class="line">	public String testGet(@PathVariable String id)&#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@ApiOperation(value = &quot;测试组合注解&quot;,notes=&quot;注意事项&quot;)</div><div class="line">	@ApiImplicitParams(&#123;</div><div class="line">			@ApiImplicitParam(dataType = &quot;User&quot;,name = &quot;user&quot;,value = &quot;用户信息&quot;,required = true,paramType = &quot;body&quot;),</div><div class="line">			@ApiImplicitParam(dataType = &quot;string&quot;,name = &quot;id&quot;,value = &quot;用户id&quot;,required = true,paramType = &quot;path&quot;)</div><div class="line">	&#125;)</div><div class="line">	@RequestMapping(value = &quot;/joinAnnotation/&#123;id&#125;&quot;,method = RequestMethod.POST)</div><div class="line">	public User joinAnnotation(@PathVariable String id,@RequestBody User user)&#123;</div><div class="line">		return user;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@ApiIgnore</div><div class="line">	public String testIgnore()&#123;</div><div class="line">		return &quot;success&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="介绍swagger2"><a href="#介绍swagger2" class="headerlink" title="介绍swagger2"></a>介绍swagger2</h2><p>写好controller后,我们可以访问以下地址: <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/swagger-ui.html</a> ,如果你没引入swagger2依赖,你是访问不了的..然后你会得到一个如下页面<br><img src="http://ww2.sinaimg.cn/large/e0d3eb33jw1fbtdvtpc3aj20wv09bdga.jpg" alt="此处输入图片的描述"></p>
<p>上面的页面,就是swagger2里面的页面,可以发现, apiInfo里面设置的内容在左边展示出来了,demo-application其实就是controller的类名,右边有三个按钮,分别是 Show/Hide,List Opertions和Expand Operations,三个按钮都可以打开,类下的接口,点击后,会得到如下一个效果页面:<br><img src="http://ww1.sinaimg.cn/large/e0d3eb33jw1fbtdum1x3yj20wr0cggmf.jpg" alt="此处输入图片的描述"><br>可以发现,展示出来了,controller下的三个接口(其实有四个,只不过有一个我们用注解忽略了,在这不展示而已..)</p>
<p>上面三个接口,在我们注解里面添加的,都有展示,请求方式,接口名称,现在我们打开某个接口,看看具体内容,接口内的内容,我不在用文字描述,我直接在截图里面添加描述了.见谅….</p>
<p><img src="http://ww4.sinaimg.cn/large/e0d3eb33jw1fbtdwn8mt6j21kw12bqf8.jpg" alt="此处输入图片的描述"></p>
<p><img src="http://ww3.sinaimg.cn/large/e0d3eb33jw1fbtdy44md4j21is0t8aig.jpg" alt="此处输入图片的描述"></p>
<p><img src="http://ww4.sinaimg.cn/large/e0d3eb33jw1fbtdykvunuj21kw0y6k2x.jpg" alt="此处输入图片的描述"></p>
<p>以上就是比较简单的demo测试文档啦,如果各位想配置更详细,就去官网看吧..地址我贴出来:</p>
<p>swagger官网地址:<a href="http://swagger.io/" target="_blank" rel="external">http://swagger.io/</a></p>
<h2 id="swagger2常用注解"><a href="#swagger2常用注解" class="headerlink" title="swagger2常用注解"></a>swagger2常用注解</h2><p>下面就是介绍,上面接口中,上面关于swagger2本人常用注解的一些描述<br>@ApiOperation：用在方法上，说明方法的作用</p>
<ol>
<li>value: 表示接口名称</li>
<li>notes: 表示接口详细描述 </li>
</ol>
<p>@ApiImplicitParams：用在方法上包含一组参数说明</p>
<p>@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面</p>
<ol>
<li>paramType：参数位置</li>
</ol>
<ul>
<li>header 对应注解：@RequestHeader</li>
<li>query 对应注解：@RequestParam</li>
<li>path  对应注解: @PathVariable</li>
<li>body 对应注解: @RequestBody</li>
</ul>
<ol>
<li>name：参数名</li>
<li>dataType：参数类型</li>
<li>required：参数是否必须传</li>
<li>value：参数的描述</li>
<li>defaultValue：参数的默认值</li>
</ol>
<p>@ApiResponses：用于表示一组响应</p>
<p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</p>
<ol>
<li>code：状态码</li>
<li>message：返回自定义信息</li>
<li>response：抛出异常的类</li>
</ol>
<p>@ApiIgnore: 表示该接口函数不对swagger2开放展示<br>以上这些就是我测试过的注解,并没有深究,有兴趣的,可以看看其它注解,或者源码,会比我描述的全很多,</p>
<p><strong>对了,需要注意下,@ApiImplicitParam注解下的paramType属性,会影响接口的测试,如果设置的属性跟spring的注解对应不上,会获取不到参数,例如:paramType=path,函数内却使用@RequestParam注解,这样,可能会获取不到传递进来的参数,需要按照上面进行对应,将@RequestParam注解改为@PathVariable才能获取到对应的参数…</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring NamedParameterJdbcTemplate 详解]]></title>
      <url>http://zhangqixiang.com/2016/12/30/Spring-NamedParameterJdbcTemplate/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>NamedParameterJdbcTemplate</code>类是基于<code>JdbcTemplate</code>类，并对它进行了封装从而支持命名参数特性。<br><code>NamedParameterJdbcTemplate</code>主要提供以下三类方法：<code>execute</code>方法、<code>query</code>及<code>queryForXXX</code>方法、<code>update</code>及<code>batchUpdate</code>方法。</p>
</blockquote>
<p>首先让我们看个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Test  </div><div class="line">public void testNamedParameterJdbcTemplate1() &#123;  </div><div class="line">NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;  </div><div class="line">//namedParameterJdbcTemplate =  </div><div class="line">//    new NamedParameterJdbcTemplate(dataSource);  </div><div class="line">namedParameterJdbcTemplate =  </div><div class="line">new NamedParameterJdbcTemplate(jdbcTemplate);  </div><div class="line">    String insertSql = &quot;insert into test(name) values(:name)&quot;;  </div><div class="line">    String selectSql = &quot;select * from test where name=:name&quot;;  </div><div class="line">    String deleteSql = &quot;delete from test where name=:name&quot;;  </div><div class="line">    Map&lt;String, Object&gt; paramMap = new HashMap&lt;String, Object&gt;();  </div><div class="line">    paramMap.put(&quot;name&quot;, &quot;name5&quot;);  </div><div class="line">    namedParameterJdbcTemplate.update(insertSql, paramMap);  </div><div class="line">    final List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();  </div><div class="line">namedParameterJdbcTemplate.query(selectSql, paramMap,  </div><div class="line">new RowCallbackHandler() &#123;  </div><div class="line">        @Override  </div><div class="line">        public void processRow(ResultSet rs) throws SQLException &#123;  </div><div class="line">            result.add(rs.getInt(&quot;id&quot;));  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">Assert.assertEquals(1, result.size());  </div><div class="line">SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);  </div><div class="line">namedParameterJdbcTemplate.update(deleteSql, paramSource);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来让我们分析下代码吧：</p>
<ol>
<li><code>NamedParameterJdbcTemplate</code>初始化:可以使用<code>DataSource</code>或<code>JdbcTemplate</code> 对象作为构造器参数初始化</li>
<li><code>insert into test(name) values(:name)</code>：其中<code>:name</code>就是命名参数</li>
<li><code>update(insertSql, paramMap)</code>：其中<code>paramMap</code>是一个<code>Map</code>类型，包含键为<code>name</code>，值为<code>name5</code>的键值对，也就是为命名参数设值的数据</li>
<li><code>query(selectSql, paramMap, new RowCallbackHandler()……)</code>：类似于<code>JdbcTemplate</code>中介绍的，唯一不同是需要传入<code>paramMap</code>来为命名参数设值</li>
<li><code>update(deleteSql, paramSource)</code>：类似于<code>update(insertSql, paramMap)</code>，但使用<code>SqlParameterSource</code>参数来为命名参数设值，此处使用<code>MapSqlParameterSource</code>实现，其就是简单封装<code>Java.util.Map</code></li>
</ol>
<p><code>NamedParameterJdbcTemplate</code>类为命名参数设值有两种方式：<code>java.util.Map</code>和<code>SqlParameterSource</code>：</p>
<ol>
<li><code>java.util.Map</code>：使用Map键数据来对于命名参数，而<code>Map</code>值数据用于设值</li>
<li><code>SqlParameterSource</code>：可以使用<code>SqlParameterSource</code>实现作为来实现为命名参数设值，默认有<code>MapSqlParameterSource</code>和<code>BeanPropertySqlParameterSource</code>实现；<code>MapSqlParameterSource</code>实现非常简单，只是封装了<code>java.util.Map</code>；而<code>BeanPropertySqlParameterSource</code>封装了一个<code>JavaBean</code>对象，通过<code>JavaBean</code>对象属性来决定命名参数的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package cn.javass.spring.chapter7;  </div><div class="line">public class UserModel &#123;  </div><div class="line">    private int id;  </div><div class="line">    private String myName;     </div><div class="line">    //省略getter和setter       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test  </div><div class="line">public void testNamedParameterJdbcTemplate2() &#123;  </div><div class="line">    NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;  </div><div class="line">    namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);  </div><div class="line">    UserModel model = new UserModel();  </div><div class="line">    model.setMyName(&quot;name5&quot;);  </div><div class="line">    String insertSql = &quot;insert into test(name) values(:myName)&quot;;  </div><div class="line">    SqlParameterSource paramSource = new BeanPropertySqlParameterSource(model);  </div><div class="line">    namedParameterJdbcTemplate.update(insertSql, paramSource);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出<code>BeanPropertySqlParameterSource</code>使用能减少很多工作量，但命名参数必须和<code>JavaBean</code>属性名称相对应才可以。</p>
]]></content>
    </entry>
    
  
  
</search>
