<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Spring NamedParameterJdbcTemplate 详解]]></title>
      <url>http://zhangqixiang.com/2016/12/30/Spring-NamedParameterJdbcTemplate/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>NamedParameterJdbcTemplate</code>类是基于<code>JdbcTemplate</code>类，并对它进行了封装从而支持命名参数特性。<br><code>NamedParameterJdbcTemplate</code>主要提供以下三类方法：<code>execute</code>方法、<code>query</code>及<code>queryForXXX</code>方法、<code>update</code>及<code>batchUpdate</code>方法。</p>
</blockquote>
<p>首先让我们看个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Test  </div><div class="line">public void testNamedParameterJdbcTemplate1() &#123;  </div><div class="line">NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;  </div><div class="line">//namedParameterJdbcTemplate =  </div><div class="line">//    new NamedParameterJdbcTemplate(dataSource);  </div><div class="line">namedParameterJdbcTemplate =  </div><div class="line">new NamedParameterJdbcTemplate(jdbcTemplate);  </div><div class="line">    String insertSql = &quot;insert into test(name) values(:name)&quot;;  </div><div class="line">    String selectSql = &quot;select * from test where name=:name&quot;;  </div><div class="line">    String deleteSql = &quot;delete from test where name=:name&quot;;  </div><div class="line">    Map&lt;String, Object&gt; paramMap = new HashMap&lt;String, Object&gt;();  </div><div class="line">    paramMap.put(&quot;name&quot;, &quot;name5&quot;);  </div><div class="line">    namedParameterJdbcTemplate.update(insertSql, paramMap);  </div><div class="line">    final List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();  </div><div class="line">namedParameterJdbcTemplate.query(selectSql, paramMap,  </div><div class="line">new RowCallbackHandler() &#123;  </div><div class="line">        @Override  </div><div class="line">        public void processRow(ResultSet rs) throws SQLException &#123;  </div><div class="line">            result.add(rs.getInt(&quot;id&quot;));  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">Assert.assertEquals(1, result.size());  </div><div class="line">SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);  </div><div class="line">namedParameterJdbcTemplate.update(deleteSql, paramSource);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来让我们分析下代码吧：</p>
<ol>
<li><code>NamedParameterJdbcTemplate</code>初始化:可以使用<code>DataSource</code>或<code>JdbcTemplate</code> 对象作为构造器参数初始化</li>
<li><code>insert into test(name) values(:name)</code>：其中<code>:name</code>就是命名参数</li>
<li><code>update(insertSql, paramMap)</code>：其中<code>paramMap</code>是一个<code>Map</code>类型，包含键为<code>name</code>，值为<code>name5</code>的键值对，也就是为命名参数设值的数据</li>
<li><code>query(selectSql, paramMap, new RowCallbackHandler()……)</code>：类似于<code>JdbcTemplate</code>中介绍的，唯一不同是需要传入<code>paramMap</code>来为命名参数设值</li>
<li><code>update(deleteSql, paramSource)</code>：类似于<code>update(insertSql, paramMap)</code>，但使用<code>SqlParameterSource</code>参数来为命名参数设值，此处使用<code>MapSqlParameterSource</code>实现，其就是简单封装<code>Java.util.Map</code></li>
</ol>
<p><code>NamedParameterJdbcTemplate</code>类为命名参数设值有两种方式：<code>java.util.Map</code>和<code>SqlParameterSource</code>：</p>
<ol>
<li><code>java.util.Map</code>：使用Map键数据来对于命名参数，而<code>Map</code>值数据用于设值</li>
<li><code>SqlParameterSource</code>：可以使用<code>SqlParameterSource</code>实现作为来实现为命名参数设值，默认有<code>MapSqlParameterSource</code>和<code>BeanPropertySqlParameterSource</code>实现；<code>MapSqlParameterSource</code>实现非常简单，只是封装了<code>java.util.Map</code>；而<code>BeanPropertySqlParameterSource</code>封装了一个<code>JavaBean</code>对象，通过<code>JavaBean</code>对象属性来决定命名参数的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package cn.javass.spring.chapter7;  </div><div class="line">public class UserModel &#123;  </div><div class="line">    private int id;  </div><div class="line">    private String myName;     </div><div class="line">    //省略getter和setter       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Test  </div><div class="line">public void testNamedParameterJdbcTemplate2() &#123;  </div><div class="line">    NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;  </div><div class="line">    namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);  </div><div class="line">    UserModel model = new UserModel();  </div><div class="line">    model.setMyName(&quot;name5&quot;);  </div><div class="line">    String insertSql = &quot;insert into test(name) values(:myName)&quot;;  </div><div class="line">    SqlParameterSource paramSource = new BeanPropertySqlParameterSource(model);  </div><div class="line">    namedParameterJdbcTemplate.update(insertSql, paramSource);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出<code>BeanPropertySqlParameterSource</code>使用能减少很多工作量，但命名参数必须和<code>JavaBean</code>属性名称相对应才可以。</p>
]]></content>
    </entry>
    
  
  
</search>
